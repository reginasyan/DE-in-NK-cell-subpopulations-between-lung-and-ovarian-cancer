# Load data
install.packages("data.table")
library(data.table)
install.packages("tidyverse")
library(tidyverse)
 
umi_matrix <- fread('Ovarian_Cancer_raw_UMI_matrix.csv', sep = '\t')
barcode_table <- read_tsv('Ovarian_Cancer_cell_annotation.tsv')

# Make a compatible UMI table 
rownames(umi_matrix) <- umi_matrix$Gene_symbol

# Find and exclude duplicates 
barcode_duplicates <- barcode_table[duplicated(barcode_table$Index), ]$Index
second_duplicates <- setdiff(colnames(umi_matrix), barcode_table$Index)
duplicates <- union(barcode_duplicates, second_duplicates)

umi_matrix <- umi_matrix[, !colnames(umi_matrix) %in% duplicates]
barcode_table <- barcode_table[!barcode_table$Index %in% duplicates, ]

# Exclude patients with early stages 
umi_matrix$Index <- rownames(umi_matrix)
umi_wp <- merge(barcode_table[, c(1, 2)], umi_matrix, by.x = 'Index')
umi_wp <- umi_wp[umi_wp$Patient %in% c('ovCHA004', 'ovCHA034', 'ovCHA066', 'ovCHA070', 'ovCHA107', 'ovCHA110'), ]
umi_fs <- t(as.matrix(umi_wp[, -2]))
colnames(umi_fs) <- umi_fs[1, ]
umi_data <- umi_fs[-1, ]

# Cluster creation and converting matrix to numeric
install.packages("parallel")
library(parallel)
num_cores <- min(detectCores(), 8)
cl <- makeCluster(num_cores)
umi_data <- parApply(cl, umi_data, 2, as.numeric)
stopCluster(cl)

# Matrix sparsing 
install.packages("Matrix")
library(Matrix)
sparse_umi_matrix <- Matrix(umi_data, sparse = TRUE)
rownames(sparse_umi_matrix) <- rownames(umi_data)
colnames(sparse_umi_matrix) <- colnames(umi_data)

barcode_table <- as.data.frame(barcode_table)
rownames(barcode_table) <- barcode_table$Index
barcode_table <- barcode_table[, -1]

# Read lung cancer table 
lung_patients <- fread('meta.csv')
lung_patients <- lung_patients[lung_patients$PatientID %in% c('PS08', 'PS09', 'PA20', 'PA15', 'PA18', 'PA19'), ]
rownames(lung_patients) <- lung_patients$Cells

lung_barcodes <- c(lung_patients$Cells, "V1")
sc_lung <- fread('raw_data.csv', select = lung_barcodes, sep = ',', quote = "\"")
sc_lung_rownames <- sc_lung$V1
sc_lung <- sc_lung[, -23185, with = FALSE]
rownames(sc_lung) <- sc_lung_rownames

sparse_sc_lung <- Matrix(as.matrix(sc_lung), sparse = TRUE)
sparse_sc_lung <- t(sparse_sc_lung)

# Exclude non gene symbol rows 
classify_id <- function(id) grepl("^[A-Z0-9]+(-[A-Z0-9]+)*$", id)

valid_ids_ovarian <- sapply(rownames(sparse_umi_matrix), classify_id)
valid_ids_lung <- sapply(rownames(sparse_sc_lung), classify_id)

ovarian_filtered <- sparse_umi_matrix[valid_ids_ovarian, , drop = FALSE]
lung_filtered <- sparse_sc_lung[valid_ids_lung, , drop = FALSE]

# Create Seurat objects 
install.packages("Seurat")
library(Seurat)
ovarian <- CreateSeuratObject(counts = ovarian_filtered, min.cells = 3, min.features = 200, project = 'ovarian')
lung <- CreateSeuratObject(counts = lung_filtered, min.cells = 3, min.features = 200, project = 'lung')

# Cutoff setting 
ovarian[["percent.mt"]] <- PercentageFeatureSet(ovarian, pattern = "^MT-")
ovarian <- subset(ovarian, subset = nFeature_RNA > 200 & nFeature_RNA < 7500 & percent.mt < 15)

lung[["percent.mt"]] <- PercentageFeatureSet(lung, pattern = "^MT-")
lung <- subset(lung, subset = nFeature_RNA > 200 & nFeature_RNA < 7500 & percent.mt < 20)

# Add metadata -
ovarian[["patient"]] <- barcode_table$Patient
lung[["patient"]] <- lung_patients$PatientID
ovarian$dataset <- 'ovarian'
lung$dataset <- 'lung'

# Integration 
options(future.globals.maxSize = 3000 * 1024^2)  # Set to 3000 MiB

lung_ovarian_combined <- merge(ovarian, lung, add.cell.ids = c("ovarian", "lung"))
lung_ovarian_combined <- SCTransform(lung_ovarian_combined, vst.flavor = "v2", conserve.memory = TRUE)
lung_ovarian_combined <- RunPCA(lung_ovarian_combined)
lung_ovarian_combined <- IntegrateLayers(
  object = lung_ovarian_combined, method = RPCAIntegration,
  orig.reduction = "pca", new.reduction = "integrated.rpca", normalization.method = "SCT",
  verbose = FALSE
)
lung_ovarian_combined <- FindNeighbors(lung_ovarian_combined, reduction = "integrated.rpca", dims = 1:30)
lung_ovarian_combined <- FindClusters(lung_ovarian_combined, resolution = 2, cluster.name = "rpca_clusters")
lung_ovarian_combined <- RunUMAP(lung_ovarian_combined, reduction = "integrated.rpca", dims = 1:30, reduction.name = "umap.rpca")

# Dimensionality reduction and plotting 
DimPlot(lung_ovarian_combined, reduction = "umap.rpca", group.by = "lung_ovarian_annotations", label = TRUE, label.size = 3) +
  theme(legend.position = "none")

# Perform SingleR cell annotation 
BiocManager::install("SingleR")
BiocManager::install("celldex")
library(SingleR)
library(celldex)

reference <- celldex::BlueprintEncodeData()
reference_expression <- assay(reference, "logcounts")
lung_ovarian_counts <- GetAssayData(lung_ovarian_combined, layer = "counts")

main_labels <- reference@colData$label.main
lung_ovarian_annotations <- SingleR(
  test = lung_ovarian_counts, 
  ref = reference_expression,
  labels = main_labels
)
lung_ovarian_combined[['lung_ovarian_annotations']] <- lung_ovarian_annotations$labels
hist(confidence_scores, breaks = 50, main = "Distribution of Confidence Scores", xlab = "Confidence Score")

# Cluster analysis 
nk_seurat <- subset(lung_ovarian_combined, lung_ovarian_annotations == "NK cells")
DimPlot(lung_ovarian_combined, reduction = "umap.rpca", group.by = "rpca_clusters")
DimPlot(nk_seurat, reduction = "umap.rpca", split.by = "dataset")

# Gene expression analysis 
install.packages("dplyr")
install.packages("fmsb")
library(dplyr)
library(fmsb)

marker_genes <- c("NCAM1", "FCGR3A", "KLRC1", "KLRK1", "NCR1", "NCR3", "NCR2", 
                  "KIR2DL1", "GZMB", "PRF1", "NKG7", "CD3E")
nk_expression <- FetchData(nk_seurat, vars = marker_genes)
mean_expression <- colMeans(nk_expression)

# Define min and max values for radar plot 
max_value <- max(mean_expression)
min_value <- 0
radar_data <- rbind(max_value, min_value, mean_expression)
rownames(radar_data) <- c("Max", "Min", "expression")

# Plot the radar chart 
radarchart(radar_data,
           axistype = 1,
           pcol = "orange",
           pfcol = scales::alpha("orange", 0.3),
           plwd = 2,
           cglcol = "grey",
           cglty = 1,
           axislabcol = "grey",
           vlcex = 0.8)
title(main = "Gene Expression in NK Cells")

# Pseudobulk DE analysis 
install.packages("ComplexHeatmap")
install.packages("ggplot2")
install.packages("ggrepel")
library(ComplexHeatmap)
library(ggplot2)
library(ggrepel)
pseudobulk <- AggregateExpression(lung_ovarian_combined, assays = "RNA", return.seurat = TRUE, group.by = c("patient", "lung_ovarian_annotations", "dataset"))
pseudobulk$celltype.dataset <- paste(pseudobulk$lung_ovarian_annotations, pseudobulk$dataset, sep = "_")
Idents(pseudobulk) <- "celltype.dataset"

# Differential expression analysis 
nk_subset <- subset(pseudobulk, idents = c("NK cells_ovarian", "NK cells_lung"))
bulk.nk.de <- FindMarkers(nk_subset, ident.1 = "NK cells_ovarian", ident.2 = "NK cells_lung", test.use = "DESeq2")

# Heatmap for top DE genes 
bulk.nk.de.filtered <- bulk.nk.de %>%
  filter(p_val_adj <= 0.05)
top_genes <- head(bulk.nk.de.filtered[order(bulk.nk.de.filtered$avg_log2FC), ], 40)
data_for_heatmap <- GetAssayData(bulk.nk.de.filtered, layer = "data")[rownames(top_genes), ]

Heatmap(as.matrix(data_for_heatmap),
        name = "expression",
        column_title = "Expression of Top 40 DE Genes in NK cells",
        row_names_side = "left",
        cluster_rows = TRUE,
        cluster_columns = TRUE)

# Volcano plot 
volcano_plot <- ggplot(bulk.nk.de, aes(x = avg_log2FC, y = -log10(p_val_adj))) +
  geom_point(aes(color = p_val_adj <= 0.05), alpha = 0.4) +
  scale_color_manual(values = c("grey", "red")) +
  geom_text_repel(data = top_genes, aes(label = gene), size = 3,
                  box.padding = 0.35, point.padding = 0.5,
                  max.overlaps = 50) +
  labs(x = "Average Log2 Fold Change", y = "-Log10 Adjusted P-value",
       title = "Volcano Plot with Top 30 Genes Labeled") +
  theme_minimal() +
  theme(legend.position = "none")
print(volcano_plot)

# ClusterProfiler analysis 
BiocManager::install("clusterProfiler")
library(clusterProfiler)
library(org.Hs.eg.db)

genes_ovarian <- bulk.nk.de %>% filter(avg_log2FC > 0) %>% rownames()
genes_lung <- bulk.nk.de %>% filter(avg_log2FC < 0) %>% rownames()

entrez_ids_ovarian <- bitr(genes_ovarian, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
go_enrichment_ovarian <- enrichGO(gene = entrez_ids_ovarian$ENTREZID, OrgDb = org.Hs.eg.db, keyType = "ENTREZID", ont = "MF", pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.05)
dotplot(go_enrichment_ovarian, showCategory = 20) + ggtitle("GO Enrichment Analysis for Ovarian")

entrez_ids_lung <- bitr(genes_lung, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
go_enrichment_lung <- enrichGO(gene = entrez_ids_lung$ENTREZID, OrgDb = org.Hs.eg.db, keyType = "ENTREZID", ont = "MF", pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.05)
dotplot(go_enrichment_lung, showCategory = 20) + ggtitle("GO Enrichment Analysis for Lung")
